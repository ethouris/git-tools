#!/usr/bin/tclsh

package require Tcl 8.5

set thisbr ""
set brlist "" ;# others only
set remote_brlist "" ;# remote branches only
set remotes [join [exec git remote] " "]

foreach br [split [exec git branch --no-color --list -a 2>@stderr] \n] {
	# Skip pointing branches
	if { [string first " -> " $br] != -1 } {
		continue
	}

	# Check if a branch contains multiple components
	set parts [file split $br]

	if { [llength $parts] > 1 } {
		# Remote branch, probably, notify it as remote.

		#puts "*D* REMOTE: '$br'"

		# Trim required because the branch is preceded by 2 spaces.
		if { [string trim [lindex $parts 0]] != "remote" } {
			continue ;# XXX report error?
		}

		lappend remote_brlist [file join {*}[lrange $parts 1 end]]
		continue
	}

	if { [string index $br 0] == "*" } {
		set thisbr [string range $br 2 end]
	} else {
		lappend brlist [string range $br 2 end]
	}
}

set breq [lindex $argv 0]

if { $breq == "" } {
	puts $thisbr
	exit 0
}

if { $breq == "--help" } {
	puts stderr "Usage:"
	puts stderr "[file tail $argv0] <branch name> <repo|=>    # Switch to branch, maybe create, = as origin"
	puts stderr "[file tail $argv0] -l  # List remote and local branches with their connections."
	exit 1
}

if { $breq == "-l" } {

	# Look through all local branches (brlist)
	# and display:
	# - if only local, /BRANCH
	# - if remote with identical name, REMOTE/BRANCH
	# - if remote with different name: /BRANCH = REMOTE/RBRANCH

	foreach br $brlist {
		if { [catch {exec git config --get branch.$br.remote} remote] } {
			# This branch has no remote-tracking.
			puts "/$br (LOCAL)"
			continue
		}

		set brhead [exec git config --get branch.$br.merge]

		# brhead = refs/heads/BRANCHNAME
		set parts [file split $brhead]

		if {[lrange $parts 0 1] != {refs heads}} {
			continue; #error?
		}

		set rbranch [file join [lrange $parts 2 end]]
		if { $rbranch == $br } {
			puts "$remote/$br"
		} else {
			puts "/$br = $remote/$rbranch"
		}
	}

	exit 0
}


# Check if this branch name is currently projected,
# no matter any further settings.

if { $breq == $thisbr } {
	puts stderr "This branch is currently projected in your view"
	exit 1
}

# Purpose of this tool.
#
# 1. Switch the view to the given branch name.
# 2. Branch should be created if doesn't exist.
# 3. If a remote is specified, the branch should be remote-tracking.
# 4. If a remote branch of given name exists, it should be simply bound.
# 5. If a remote branch doesn't exist, an entry should be added for tracking so that it's made remote.

# Possible call syntax:

# FIRST ARGUMENT: branch name. This branch must be set to the view,
# and created if it doesn't exist. Beside this:

# git cb dev-fix-error
#  -- Create local branch.
#
# git cb dev-fix-error =
#  -- Create a remote-tracking branch from a default remote (origin)
#
# git cb dev-fix-error remo1
#  -- Create a remote-tracking brach on a given remote
#
# git cb dev-fix-error remo1/fix-error
#  -- Create a remote-tracking branch on given remote pinned into given remote branch name
#
# git cb dev-fix-error =/fix-error
#  -- Default remote, use different branch name

if { $breq in $brlist } {
	# Simply switch and do nothing else
	puts "Existing branch, switching."
	exec >@stdout 2>@stderr git checkout $breq
	exit 0
}

set remo [lindex $argv 1]

if { $remo == "" } {
	puts stderr "Usage error: Remote required, arg #2 should be:"
	puts stderr "    <remote>  - explicit remote name"
	puts stderr "    =         - the default remote"
	puts stderr "    =<prefix> - remote out of those in config that start with <prefix>"
	puts stderr "    .         - no remote (local branch)"
	exit 1
}

if { $remo == "." } {
	# Local
	# Check if there isn't a remote branch with this name,
	# it might be confusing.

	foreach r $remote_brlist {
		set rbr [file join {*}[lassign [file split $r] remo]]
		if {$breq == $rbr} {
			puts stderr "Already exists as '$r', can be confusing. Use another name."
			exit 1
		}
	}

	puts "Creating this branch as local."
	exec 2>@stderr >@stdout git checkout -b $breq
	exit 0
}

set rparts [lassign [file split $remo] remo]

if {$rparts == ""} {
	set remobr ""
} else {
	set remobr [file join {*}$rparts]
}

if { $remo == "=" } {
	set remo origin
} elseif { [string first = $remo] == 0 } {
	set pfx [string range $remo 1 end]
	set remotes [exec git remote]
	set remo [lsearch -inline $remotes $pfx*]
	if {$remo == ""} {
		puts stderr "ERROR: no remote starting with '$pfx'"
		puts stderr "Available: [join $remotes { }]"
		exit 1
	}
}

set all_remos [exec git remote]

if { $remo ni $all_remos } {
	puts stderr "ERROR: No such remote '$remo'. Use = as alias to origin. Available remotes:"
	puts stderr $all_remos
	exit 1
}

if { $remobr == "" } {
	set remobr $breq
}

# We request now the branch to track the local branch.
# First check if the branch was requested as remote tracked.

if {"$remo/$remobr" in $remote_brlist} {
	# Easy. Create assignment

	puts "Remote branch exists. Creating and assigning."
	exec >@stdout git branch --track $breq $remo/$remobr  2>@stderr

} else {
	exec >@stdout git branch $breq  2>@stderr
	exec >@stdout git config branch.$breq.remote $remo  2>@stderr
	exec >@stdout git config branch.$breq.merge refs/heads/$remobr 2>@stderr

	puts " --- No remote branch - will be remote-created at first push (please ignore git complaints)"
}

set desc [lrange $argv 2 end]
if {$desc != ""} {
	if {[llength $desc] == 1} {
		set desc [lindex $desc 0]
	}
	exec >@stdout git config branch.$breq.description $desc
}

set checkedout [exec git status -s -uno]

if {$checkedout != ""} {
	puts "NOTE: You have checkedout files, NOT CHECKING OUT branch."
	puts "NOTE: Make sure that the repo state matches your needs, then do:"
	puts "\tgit checkout $breq"
	exit 1
}

if { [catch {exec >@stdout 2>@stderr git checkout $breq} result] } {
	puts "Git complaints: $errorInfo"
	puts $result
}
exit 0


