#!/usr/bin/tclsh

# This tool does better job as default configuration of 'gvimdiff' used as a difftool.
# It does the same if both files exist and the file was just altered - plus prints 'DIFF' message on console.
# If the file has been added or deleted, it just prints the info on the screen and
# allows you to edit the new file (if added) or diff-edit the new file under the name
# of the deleted file, if you answer 'e' for the prompt.


# To use that, put the following lines in your .gitconfig file:
#
# [diff]
# 	tool = gvimdiffwrp
# 
# [difftool]
# 	prompt = no
# 
# [difftool.gvimdiffwrp]
# 	cmd = gvimdiff-git-wrapper $LOCAL $REMOTE $BASE


proc getpath arg { return $arg }

if { [catch {exec uname -o} osname] } {
	set osname unknown
}

if { [info exists env(DISPLAY)] } {
	set vim gvim
} elseif { $osname == "Cygwin" && [info exists env(VIMPATH)]} {
	set vim $env(VIMPATH)
	rename getpath ""
	proc getpath arg { return [exec cygpath -w $arg] }
} else {
	set vim vim
}

proc ask text {
	puts -nonewline $text
	flush stdout
}

proc answer {} {
	set a [gets stdin]
	return [string tolower [string index $a 0]]
}

lassign $argv older newer base

if { $older == "/dev/null" } {

	ask "NEW:  '$newer'  (e)dit/(s)kip/(d)elete from repo (NOT FROM FILESYSTEM) \[e/S/d\] "
	switch -- [answer] {
		e {
			exec $vim -f [getpath $newer]
		}
		d {
			exec >@stdout git rm --cached [getpath $newer]
		}
	}
	exit 0
}

if { $newer == "/dev/null" } {
	ask "DELETED:  '$base' (e)dit as new/(s)kip \[e/S\] "
	if { [answer] == "e" } {
		exec >@stdout $vim -f -d [getpath $older] [getpath $base]
	}
	exit 0
}

puts "DIFF: '$base'"
exec >@stdout $vim -f -d [getpath $older] [getpath $newer]
